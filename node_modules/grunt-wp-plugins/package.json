{
  "name": "grunt-wp-plugins",
  "description": "Grunt wrapper of WP-CLI for listing Wordpress plugins",
  "version": "0.0.2",
  "homepage": "https://github.com/jnweaver/grunt-wp-plugins",
  "author": {
    "name": "Nick Weaver",
    "email": "jnweaver@gmail.com",
    "url": "https://github.com/jnweaver/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jnweaver/grunt-wp-plugins.git"
  },
  "bugs": {
    "url": "https://github.com/jnweaver/grunt-wp-plugins/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jnweaver/grunt-wp-plugins/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">=0.8.0"
  },
  "dependencies": {
    "sprintf-js": "^0.0.7"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.9.2",
    "grunt": "~0.4.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "wordpress"
  ],
  "readme": "# grunt-wp-plugins\n\n> A Grunt wrapper for running WP-CLI to list plugins.\n\nThis convenience plugin wraps the [WP-CLI](http://wp-cli.org/) command `wp plugin list` in a grunt task. It provides a quick way for seeing the current state of your Wordpress site's plugin inventory, which is especially handy if you [manage plugins using Composer](http://composer.rarst.net/).\n\n## Getting Started\nThis plugin requires Grunt `~0.4.0`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-wp-plugins --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-wp-plugins');\n```\n\n## The \"wp_plugins\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `wp_plugins` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  wp_plugins: {\n    your_target: {\n      options: {\n        wordpress_path: 'pubic/wp',\n        wp_bin_path: 'vendor/bin' \n      }\n    },\n  },\n});\n```\n\n### Options\n\n#### options.wordpress_path\nType: `String`\nDefault value: `''`\n\nThe path, relative to Gruntfile.js, where Wordpress core file are installed.\n\n#### options.wp_bin_path\nType: `String`\nDefault value: `''`\n\nThe path where your `wp` binary resides. (The process will pass your environment PATH, so you should not need to set this if you already have WP-CLI installed on your system.)\n\n### Usage Examples\n\n#### Default Options\nA default configuration just requires an empty target to be defined.\n\n```js\ngrunt.initConfig({\n  wp_plugins: {\n    blog: {\n    }\n  },\n});\n```\n\n#### Custom Options\nIn this example, Wordpress has been installed in `public/wp` and WP-CLI is installed using Composer (which symlinks the wp binary into `vendor/bin`). \n\n```js\ngrunt.initConfig({\n  wp_plugins: {\n    blog: {\n      options: {\n        wordpress_path: 'public/wp',\n        wp_bin_path: 'vendor/bin'\n      }\n    }\n  },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. \n",
  "readmeFilename": "README.md",
  "_id": "grunt-wp-plugins@0.0.2",
  "dist": {
    "shasum": "d73ba1102a22569c55a75d6d038da49103d308fe"
  },
  "_from": "grunt-wp-plugins@0.0.2",
  "_resolved": "https://registry.npmjs.org/grunt-wp-plugins/-/grunt-wp-plugins-0.0.2.tgz"
}
